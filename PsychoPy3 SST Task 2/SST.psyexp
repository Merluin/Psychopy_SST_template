<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001', 'training': '1'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="norm" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[1,1,1]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="SST" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="TEST">
      <TextComponent name="text">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$ssd *1000" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="FEEDBACK">
      <CodeComponent name="feedback_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Feedback Routine:&amp;#10;# This routine provides feedback to participants based on their responses in the trial.&amp;#10;# It displays messages corresponding to their performance, differentiating between&amp;#10;# correct, incorrect, too fast, too slow, and stop-signal responses.&amp;#10;&amp;#10;# Define the feedback messages for various response outcomes.&amp;#10;msg = &quot;&quot;  # Initializes the message variable to be empty&amp;#10;correct_msg = 'Correct'  # Message displayed for correct responses in Go trials&amp;#10;incorrect_msg = 'Oops'  # Message for incorrect responses&amp;#10;too_slow_msg = 'Too slow'  # Message when response is slower than expected&amp;#10;too_fast_msg = 'Too fast'  # Message when response is faster than expected&amp;#10;correct_stop_msg = 'Perfect stop'  # Message for successful inhibition in a Stop trial&amp;#10;incorrect_stop_msg = 'You must Stop!'  # Message when failing to inhibit in a Stop trial&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="correct_msg = &quot;Correct&quot;;&amp;#10;incorrect_msg = &quot;Oops&quot;;&amp;#10;too_slow_msg = &quot;To slow&quot;;&amp;#10;too_fast_msg = &quot;To fast&quot;;&amp;#10;correct_stop_msg = &quot;Perferfect stop&quot;;&amp;#10;incorrect_stop_msg = &quot;You must Stop !&quot;;&amp;#10;msg = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((signal === 0)) {&amp;#10;    if ((key_resp.keys !== null)) {&amp;#10;        if ((key_resp.rt &lt;= (StopSignal_start - 0.05))) {&amp;#10;            msg = too_fast_msg;&amp;#10;        } else {&amp;#10;            if ((key_resp.corr === 1)) {&amp;#10;                msg = correct_msg;&amp;#10;            } else {&amp;#10;                if ((key_resp.corr === 0)) {&amp;#10;                    msg = incorrect_msg;&amp;#10;                } else {&amp;#10;                    if ((key_resp.rt &gt;= ((StopSignal_start - 0.05) + ssd))) {&amp;#10;                        msg = too_slow_msg;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        msg = too_slow_msg;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((signal === 1)) {&amp;#10;        if ((key_resp.keys !== null)) {&amp;#10;            msg = incorrect_stop_msg;&amp;#10;        } else {&amp;#10;            msg = correct_stop_msg;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Determines the feedback message based on the trial type and response characteristics.&amp;#10;if signal == 0:  # For Go trials&amp;#10;    if key_resp.keys is not None:  # If there was a response&amp;#10;        if key_resp.rt &lt;= StopSignal_start - 0.05:&amp;#10;            msg = too_fast_msg  # If response is premature&amp;#10;        elif key_resp.corr == 1:&amp;#10;            msg = correct_msg  # If response is correct&amp;#10;        elif key_resp.corr == 0:&amp;#10;            msg = incorrect_msg  # If response is incorrect&amp;#10;        elif key_resp.rt &gt;= (StopSignal_start - 0.05 + ssd):&amp;#10;            msg = too_slow_msg  # If response is too slow&amp;#10;    else:&amp;#10;        msg = too_slow_msg  # If no response, considered too slow&amp;#10;elif signal == 1:  # For Stop trials&amp;#10;    if key_resp.keys is not None:&amp;#10;        msg = incorrect_stop_msg  # If there was a response, it's incorrect (failed to stop)&amp;#10;    else:&amp;#10;        msg = correct_stop_msg  # If no response, it's a perfect stop&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="feedback_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="feedback_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="TRIAL_SST">
      <CodeComponent name="ssd_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Trial Routine:&amp;#10;# This routine manages the sequence of events in a single trial, including&amp;#10;# handling stop signals, recording response times, and adjusting stop-signal delays.&amp;#10;&amp;#10;# Hides the mouse cursor for the duration of the experiment to avoid distractions.&amp;#10;event.Mouse(visible=False)&amp;#10;&amp;#10;# The predefined timing for the interval between the Go signal and the Stop signal start.&amp;#10;StopSignal_start = 0.95  # Stop signal starts at 950 ms after the Go signal&amp;#10;&amp;#10;# Initial Stop Signal Delay (SSD) set to 150 milliseconds.&amp;#10;ssd = 0.15&amp;#10;ssd_1 = 0.15&amp;#10;ssd_2 = 0.15&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;StopSignal_start = 0.95;&amp;#10;ssd = 0.15;&amp;#10;ssd_1 = 0.15;&amp;#10;ssd_2 = 0.15;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;SSD&quot;, (ssd * 1000));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Records the SSD at the beginning of each trial in milliseconds.&amp;#10;thisExp.addData(&quot;SSD&quot;, ssd * 1000)  # SSD is stored in milliseconds&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (key_resp.rt) {&amp;#10;    if ((signal === 1)) {&amp;#10;        if ((key_resp.rt &lt;= (StopSignal_start + ssd))) {&amp;#10;            psychoJS.experiment.addData(&quot;premature&quot;, 1);&amp;#10;        } else {&amp;#10;            psychoJS.experiment.addData(&quot;premature&quot;, 0);&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((signal === 0)) {&amp;#10;            if ((key_resp.rt &lt;= StopSignal_start)) {&amp;#10;                psychoJS.experiment.addData(&quot;premature&quot;, 1);&amp;#10;            } else {&amp;#10;                psychoJS.experiment.addData(&quot;premature&quot;, 0);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (key_resp.rt) {&amp;#10;    rt = ((key_resp.rt - StopSignal_start) * 1000);&amp;#10;    psychoJS.experiment.addData(&quot;RT&quot;, rt);&amp;#10;}&amp;#10;if ((signal === 1)) {&amp;#10;    if ((key_resp.keys.length &gt; 0)) {&amp;#10;        ssd = (ssd - 0.05);&amp;#10;        if ((ssd &lt;= 0.05)) {&amp;#10;            ssd = 0.05;&amp;#10;        }&amp;#10;    } else {&amp;#10;        ssd = (ssd + 0.05);&amp;#10;        if ((ssd &gt;= 0.65)) {&amp;#10;            ssd = 0.65;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Code to log and handle premature responses.&amp;#10;if key_resp.rt:  # Checks if there was a response&amp;#10;    if signal == 1:  # For Stop trials&amp;#10;        # Checks if the response was made before the sum of StopSignal was presented&amp;#10;        if key_resp.rt &lt;= (StopSignal_start + ssd):&amp;#10;            thisExp.addData(&quot;premature&quot;, 1)  # Logs response as premature&amp;#10;        else:&amp;#10;            thisExp.addData(&quot;premature&quot;, 0)  # Logs response as not premature&amp;#10;    elif signal == 0:  # For Go trials&amp;#10;        # Checks if the response was made before the Go signal was fully presented&amp;#10;        if key_resp.rt &lt;= (StopSignal_start):&amp;#10;            thisExp.addData(&quot;premature&quot;, 1)&amp;#10;        else:&amp;#10;            thisExp.addData(&quot;premature&quot;, 0)&amp;#10;&amp;#10;# Calculates and logs the Reaction Time (RT) from the end of the Go signal to the response.&amp;#10;if key_resp.rt:&amp;#10;    rt = (key_resp.rt - StopSignal_start) * 1000  # Converts seconds to milliseconds&amp;#10;    thisExp.addData(&quot;RT&quot;, rt)&amp;#10;&amp;#10;# Dynamic SSD adjustment:&amp;#10;# Adjusts the SSD based on the participant's performance in Stop trials.&amp;#10;if signal == 1:&amp;#10;    if len(key_resp.keys) &gt; 0:  # If the participant responded&amp;#10;        ssd -= 0.050  # Decreases SSD by 50 ms to make stopping easier next time&amp;#10;        if ssd &lt;= 0.050:  # Ensures SSD doesn't go below 50 ms&amp;#10;            ssd = 0.050&amp;#10;    else:  # If the participant did not respond&amp;#10;        ssd += 0.050  # Increases SSD by 50 ms to make stopping harder next time&amp;#10;        if ssd &gt;= 0.650:  # Ensures SSD doesn't exceed 650 ms&amp;#10;            ssd = 0.650&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ssd_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="dot_img">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/fix.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="dot_img" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.8" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="go_img">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$&quot;images/&quot; + go_file" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="go_img" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.8" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="stop_img">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$&quot;images/&quot;  + stop_file" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stop_img" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$StopSignal_start + ssd" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.07" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_key" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.7" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <StaticComponent name="ISI">
        <Param val="" valType="code" updates="None" name="code"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ISI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.8" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
      </StaticComponent>
    </Routine>
    <Routine name="BREAK">
      <CodeComponent name="break_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((Loop_blocchi.thisRepN === (nb_loop_blocks - 1))) {&amp;#10;    Loop_blocchi.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Break Between Blocks Code:&amp;#10;# This code controls the transition between blocks of trials. Specifically, it&amp;#10;# checks the current block number and skips the break if it's the last block,&amp;#10;# allowing the experiment to proceed directly to the concluding routine.&amp;#10;&amp;#10;# Check if the current block is the last block in the experiment.&amp;#10;# Loop_blocchi.thisRepN returns the zero-based index of the current repetition,&amp;#10;# so we compare it against (nb_loop_blocks - 1) which is the index of the last block.&amp;#10;if Loop_blocchi.thisRepN == (nb_loop_blocks - 1):&amp;#10;    Loop_blocchi.finished = True  # Ends the loop after the current block finishes&amp;#10;    continueRoutine = False  # Immediately ends the current routine to skip the break&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="break_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="break_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="break_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Pause.&amp;#10;&amp;#10;Press 'space' to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="break_kb">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="break_kb" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="BEGIN_EXP">
      <TextComponent name="begin_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Training is finished. &amp;#10;&amp;#10;You will begin the expreriment. From now, you will not receive any feedback. &amp;#10;&amp;#10;Press 'space' to begin" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="begin_kb">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="begin_kb" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="INFO">
      <CodeComponent name="MIT_licence">
        <Param val="# MIT License&amp;#10;# &amp;#10;# Copyright (c) [2014] [Thomas Quettier]&amp;#10;# &amp;#10;# Permission is hereby granted, free of charge, to any person obtaining a copy&amp;#10;# of this software and associated documentation files (the &quot;Software&quot;), to deal&amp;#10;# in the Software without restriction, including without limitation the rights&amp;#10;# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&amp;#10;# copies of the Software, and to permit persons to whom the Software is&amp;#10;# furnished to do so, subject to the following conditions:&amp;#10;#   &amp;#10;#   The above copyright notice and this permission notice shall be included in all&amp;#10;# copies or substantial portions of the Software.&amp;#10;# &amp;#10;# THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&amp;#10;# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&amp;#10;# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&amp;#10;# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&amp;#10;# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&amp;#10;# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&amp;#10;# SOFTWARE.&amp;#10;# &amp;#10;# Additional Note:&amp;#10;#   While not legally binding, the author would appreciate an acknowledgment or citation&amp;#10;# where possible if this software is used in the development of new software, publications,&amp;#10;# or research. For citation guidelines, please refer to the CITATION file in this repository." valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="MIT_licence" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="setting_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# This section sets essential parameters for the experiment based on user input &amp;#10;# and predefined settings. These parameters determine the number of trials and blocks, &amp;#10;# include optional training, and set the duration between trials.&amp;#10;&amp;#10;# Number of blocks to loop through in the experiment&amp;#10;nb_loop_blocks = 4 # default 4&amp;#10;&amp;#10;# Number of trials per block. Each block contains 16 trials,&amp;#10;# cumulatively 128 trials across all blocks with a distribution of &amp;#10;# 32 stop trials and 96 go trials (stop:go ratio = 1:4 please refer to the conditions.xlsx file)&amp;#10;nb_loop_trial = 16  # default 16&amp;#10;# 16 trials per block x 8 blocks = 128 total trials&amp;#10;&amp;#10;# Inter-Trial Interval (ITI): This is the time delay between the end of one trial &amp;#10;# and the start of the next trial, set to 1.6 seconds&amp;#10;iti = 1.6&amp;#10;&amp;#10;# Training flag obtained from the experiment info dialogue box:&amp;#10;# '1' means the experiment includes a training phase,&amp;#10;# '0' means the training phase is skipped&amp;#10;nb_training = expInfo['training']" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="nb_loop_blocks = 4;&amp;#10;nb_loop_trial = 16;&amp;#10;iti = 1.6;&amp;#10;nb_training = expInfo[&quot;training&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setting_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="info_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="info_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Your task will be to respond to the green arrow that will appear on the screen.&amp;#10;&amp;#10;In some trials, immediately after the arrow, the letters &quot;XX&quot; will appear. In this case, your task will be NOT to press the key, thus stopping your response.&amp;#10;&amp;#10;Sometimes it will be very easy to stop, other times more difficult, because the test adapts to your performance.&amp;#10;&amp;#10;Attention! We ask you not to wait for the appearance of the stimulus, but to respond as quickly and accurately as possible. Don't worry about making mistakes, the test will adapt.&amp;#10;&amp;#10;Press 'space' to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="info_kb">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="info_kb" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ISTRUCTIONS">
      <TextComponent name="istr_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="istr_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="It is still very important that you respond as QUICKLY and ACCURATELY as possible.&amp;#10;&amp;#10;The experiment lasts about 20 minutes.&amp;#10;The experiment consists of a practice block and 4 experimental blocks. During the practice block, you will receive feedback on your performance (&quot;too slow&quot;, &quot;correct stop&quot;).&amp;#10;&amp;#10;Between each block, there will be an opportunity for a short break.&amp;#10;&amp;#10;Press 'space' to begin" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="istr_kb">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="istr_kb" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="THANKS">
      <TextComponent name="thanks_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="thanks_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for your time." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="thanks_kb">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="thanks_kb" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ITI">
      <TextComponent name="iti_txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="iti_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$iti" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="PREPROCESSING">
      <CodeComponent name="code">
        <Param val="import pandas as pd&amp;#10;import numpy as np&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;import * as np from 'numpy';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="thisExp.saveAsWideText('data/temp.csv', delim='auto')&amp;#10;&amp;#10;data = pd.read_csv(&quot;data/temp.csv&quot;, sep=&quot;,&quot;, header=0)&amp;#10;&amp;#10;# Filter rows where 'Loop_blocchi.thisRepN' is greater than or equal to 0&amp;#10;data = data[data['Loop_blocchi.thisRepN'] &gt;= 0]&amp;#10;&amp;#10;# Convert necessary columns to categorical type and perform calculations&amp;#10;data['subject'] = pd.Categorical(data['participant'])&amp;#10;data['go_file'] = pd.Categorical(data['go_file'])&amp;#10;data['stop_file'] = pd.Categorical(data['stop_file'])&amp;#10;data['correct_key'] = pd.Categorical(data['correct_key'])&amp;#10;data['signal'] = pd.Categorical(data['signal'])&amp;#10;data['response'] = pd.Categorical(data['key_resp.keys'])&amp;#10;&amp;#10;# Conditionally fill the SSD column based on signal type&amp;#10;data['SSD'] = np.where(data['signal'] == '0', np.nan, data['SSD'])&amp;#10;&amp;#10;# Calculate real SSD values by converting event timestamps to milliseconds and rounding&amp;#10;data['SSD.real'] = round((data['stop_img.stopped'].astype(float) - data['go_img.stopped'].astype(float)) * 1000, 0)&amp;#10;&amp;#10;# Include extra columns as specified&amp;#10;data['congruent'] = data['key_resp.corr']&amp;#10;data['premature'] = data['premature']&amp;#10;data['rt'] = data['RT']&amp;#10;data['bloch'] = data['Loop_blocchi.thisRepN'] + 1&amp;#10;data['trial'] = data['loop_trials.thisN'] + 1&amp;#10;&amp;#10;# Select only the specified columns&amp;#10;data = data[['subject', 'go_file', 'stop_file', 'correct_key', 'signal', 'SSD', 'premature', 'bloch', 'trial', 'response', 'congruent', 'rt']]&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;# Create a filename based on the participant's ID&amp;#10;# Ensure that 'participant' is correctly keyed in your expInfo dictionary&amp;#10;participant_id = expInfo['participant']  # Replace 'participant' if the key differs&amp;#10;filename = f&quot;data/processed_data_participant_{participant_id}.xlsx&quot;&amp;#10;&amp;#10;# Save the processed data to an Excel file with the participant-specific filename&amp;#10;data.to_excel(filename, index=False)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="INFO"/>
    <Routine name="ISTRUCTIONS"/>
    <LoopInitiator loopType="TrialHandler" name="Loop_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'stop.jpg', 'correct_key': 'left', 'signal': 1}, {'go_file': 'go_right.png', 'stop_file': 'stop.jpg', 'correct_key': 'right', 'signal': 1}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="nb_training" valType="num"/>
      <Param name="name" updates="None" val="Loop_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="TRIAL_SST"/>
    <Routine name="FEEDBACK"/>
    <Routine name="ITI"/>
    <LoopTerminator name="Loop_practice"/>
    <LoopInitiator loopType="TrialHandler" name="Loop_begin">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="nb_training" valType="num"/>
      <Param name="name" updates="None" val="Loop_begin" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="BEGIN_EXP"/>
    <LoopTerminator name="Loop_begin"/>
    <LoopInitiator loopType="TrialHandler" name="Loop_blocchi">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="nb_loop_blocks" valType="num"/>
      <Param name="name" updates="None" val="Loop_blocchi" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="loop_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'bianco.png', 'correct_key': 'left', 'signal': 0}, {'go_file': 'go_right.png', 'stop_file': 'bianco.png', 'correct_key': 'right', 'signal': 0}, {'go_file': 'go_left.png', 'stop_file': 'stop.jpg', 'correct_key': 'left', 'signal': 1}, {'go_file': 'go_right.png', 'stop_file': 'stop.jpg', 'correct_key': 'right', 'signal': 1}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="nb_loop_trial" valType="num"/>
      <Param name="name" updates="None" val="loop_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="TRIAL_SST"/>
    <Routine name="ITI"/>
    <LoopTerminator name="loop_trials"/>
    <Routine name="BREAK"/>
    <LoopTerminator name="Loop_blocchi"/>
    <Routine name="THANKS"/>
  </Flow>
</PsychoPy2experiment>
